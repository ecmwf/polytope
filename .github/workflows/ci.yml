name: ci

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
    tags-ignore:
      - "**"

  # Trigger the workflow on pull request
  pull_request: ~

  # Trigger the workflow manually
  workflow_dispatch: ~

  # Trigger after public PR approved for CI
  pull_request_target:
    types: [labeled]

jobs:
  # Run CI including downstream packages on self-hosted runners
  downstream-ci:
    name: downstream-ci
    if: ${{ !github.event.pull_request.head.repo.fork && github.event.action != 'labeled' || github.event.label.name == 'approved-for-ci' }}
    uses: ecmwf/downstream-ci/.github/workflows/downstream-ci.yml@main
    with:
      polytope: ecmwf/polytope@${{ github.event.pull_request.head.sha || github.sha }}
      codecov_upload: true
      python_qa: true
    secrets: inherit

  test-purepython:
    env:
      USE_RUST: "0"
    strategy:
      fail-fast: false
      matrix:
        name:
          - ubuntu-22.04
          - macos-latest
        include:
          - name: ubuntu-22.04
            os: ubuntu-22.04
            compiler_fc: gfortran
          - name: macos-latest
            os: macos-latest
            compiler_fc: gfortran-12
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install eccodes
        id: install-ecbuild
        uses: ecmwf/build-package@v2
        with:
          self_build: false
          dependencies: |
            ecmwf/ecbuild@develop
            MathisRosenhauer/libaec@refs/tags/v1.1.3
            ecmwf/eccodes@develop

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install setuptools
        run: |
          python -m pip install --upgrade pip setuptools

      - name: Install Polytope
        run: |
          python -m pip install -v .[test]

      - name: Run Tests with Repository Code
        env:
          LD_LIBRARY_PATH: ${{ steps.install-dependencies.outputs.lib_path }}
        shell: bash -eux {0}
        run: |
          DYLD_LIBRARY_PATH=${{ env.LD_LIBRARY_PATH }} python -m pytest -m "not fdb" tests --cov=./ --cov-report=xml
          python -m coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml

  test-rust:
    env:
      USE_RUST: "1"
    strategy:
      fail-fast: false
      matrix:
        name:
          - ubuntu-22.04
          - macos-latest
        include:
          - name: ubuntu-22.04
            os: ubuntu-22.04
            compiler_fc: gfortran
          - name: macos-latest
            os: macos-latest
            compiler_fc: gfortran-12
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install eccodes and Dependencies
        id: install-dependencies
        uses: ecmwf/build-package@v2
        with:
          self_build: false
          dependencies: |
            ecmwf/ecbuild@develop
            MathisRosenhauer/libaec@refs/tags/v1.1.3
            ecmwf/eccodes@develop

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install setuptools
        run: |
          python -m pip install --upgrade pip setuptools

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Polytope
        run: |
          python -m pip install -v .[test]

      - name: Run Tests with Repository Code
        env:
          LD_LIBRARY_PATH: ${{ steps.install-dependencies.outputs.lib_path }}
        shell: bash -eux {0}
        run: |
          DYLD_LIBRARY_PATH=${{ env.LD_LIBRARY_PATH }} python -m pytest -m "not fdb" tests --cov=./ --cov-report=xml
          python -m coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml

  downstream-ci-hpc:
    name: downstream-ci-hpc
    if: ${{ !github.event.pull_request.head.repo.fork && github.event.action != 'labeled' || github.event.label.name == 'approved-for-ci' }}
    uses: ecmwf/downstream-ci/.github/workflows/downstream-ci-hpc.yml@main
    with:
      polytope: ecmwf/polytope@${{ github.event.pull_request.head.sha || github.sha }}
    secrets: inherit

  deploy:
    if: ${{ github.event_name == 'release' }}
    name: Upload to Pypi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build
          twine upload dist/*
