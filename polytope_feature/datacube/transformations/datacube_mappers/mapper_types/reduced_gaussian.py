import bisect
import logging
import math

from .....utility.list_tools import bisect_left_cmp, bisect_right_cmp
from ..datacube_mappers import DatacubeMapper


class ReducedGaussianGridMapper(DatacubeMapper):
    def __init__(self, base_axis, mapped_axes, resolution, md5_hash=None, local_area=[], axis_reversed=None):
        # TODO: if local area is not empty list, raise NotImplemented
        self._mapped_axes = mapped_axes
        self._base_axis = base_axis
        self._resolution = resolution
        self._first_axis_vals = self.first_axis_vals()
        self._second_axis_spacing = {}
        self._axis_reversed = {mapped_axes[0]: True, mapped_axes[1]: False}
        if self._axis_reversed[mapped_axes[1]]:
            raise NotImplementedError("Octahedral grid with second axis in decreasing order is not supported")
        if not self._axis_reversed[mapped_axes[0]]:
            raise NotImplementedError("Octahedral grid with first axis in increasing order is not supported")
        self.compressed_grid_axes = [self._mapped_axes[1]]
        if md5_hash is not None:
            self.md5_hash = md5_hash
        else:
            self.md5_hash = _md5_hash.get(resolution, None)

    def gauss_first_guess(self):
        i = 0
        gvals = [
            2.4048255577e0,
            5.5200781103e0,
            8.6537279129e0,
            11.7915344391e0,
            14.9309177086e0,
            18.0710639679e0,
            21.2116366299e0,
            24.3524715308e0,
            27.4934791320e0,
            30.6346064684e0,
            33.7758202136e0,
            36.9170983537e0,
            40.0584257646e0,
            43.1997917132e0,
            46.3411883717e0,
            49.4826098974e0,
            52.6240518411e0,
            55.7655107550e0,
            58.9069839261e0,
            62.0484691902e0,
            65.1899648002e0,
            68.3314693299e0,
            71.4729816036e0,
            74.6145006437e0,
            77.7560256304e0,
            80.8975558711e0,
            84.0390907769e0,
            87.1806298436e0,
            90.3221726372e0,
            93.4637187819e0,
            96.6052679510e0,
            99.7468198587e0,
            102.8883742542e0,
            106.0299309165e0,
            109.1714896498e0,
            112.3130502805e0,
            115.4546126537e0,
            118.5961766309e0,
            121.7377420880e0,
            124.8793089132e0,
            128.0208770059e0,
            131.1624462752e0,
            134.3040166383e0,
            137.4455880203e0,
            140.5871603528e0,
            143.7287335737e0,
            146.8703076258e0,
            150.0118824570e0,
            153.1534580192e0,
            156.2950342685e0,
        ]

        numVals = len(gvals)
        vals = []
        for i in range(self._resolution):
            if i < numVals:
                vals.append(gvals[i])
            else:
                vals.append(vals[i - 1] + math.pi)
        return vals

    def get_precomputed_values_N320(self):
        lats = [
            89.784877,
            89.506203,
            89.225883,
            88.945191,
            88.664358,
            88.383457,
            88.102518,
            87.821556,
            87.540577,
            87.259589,
            86.978592,
            86.697590,
            86.416583,
            86.135573,
            85.854560,
            85.573545,
            85.292528,
            85.011510,
            84.730490,
            84.449469,
            84.168447,
            83.887425,
            83.606402,
            83.325378,
            83.044353,
            82.763329,
            82.482303,
            82.201278,
            81.920252,
            81.639225,
            81.358199,
            81.077172,
            80.796145,
            80.515118,
            80.234091,
            79.953063,
            79.672035,
            79.391008,
            79.109980,
            78.828951,
            78.547923,
            78.266895,
            77.985866,
            77.704838,
            77.423809,
            77.142781,
            76.861752,
            76.580723,
            76.299694,
            76.018665,
            75.737636,
            75.456607,
            75.175578,
            74.894549,
            74.613520,
            74.332490,
            74.051461,
            73.770432,
            73.489402,
            73.208373,
            72.927344,
            72.646314,
            72.365285,
            72.084255,
            71.803226,
            71.522196,
            71.241166,
            70.960137,
            70.679107,
            70.398077,
            70.117048,
            69.836018,
            69.554988,
            69.273959,
            68.992929,
            68.711899,
            68.430869,
            68.149839,
            67.868810,
            67.587780,
            67.306750,
            67.025720,
            66.744690,
            66.463660,
            66.182630,
            65.901600,
            65.620570,
            65.339540,
            65.058510,
            64.777481,
            64.496451,
            64.215421,
            63.934391,
            63.653361,
            63.372331,
            63.091300,
            62.810270,
            62.529240,
            62.248210,
            61.967180,
            61.686150,
            61.405120,
            61.124090,
            60.843060,
            60.562030,
            60.281000,
            59.999970,
            59.718940,
            59.437910,
            59.156879,
            58.875849,
            58.594819,
            58.313789,
            58.032759,
            57.751729,
            57.470699,
            57.189668,
            56.908638,
            56.627608,
            56.346578,
            56.065548,
            55.784518,
            55.503487,
            55.222457,
            54.941427,
            54.660397,
            54.379367,
            54.098337,
            53.817306,
            53.536276,
            53.255246,
            52.974216,
            52.693186,
            52.412155,
            52.131125,
            51.850095,
            51.569065,
            51.288034,
            51.007004,
            50.725974,
            50.444944,
            50.163913,
            49.882883,
            49.601853,
            49.320823,
            49.039793,
            48.758762,
            48.477732,
            48.196702,
            47.915672,
            47.634641,
            47.353611,
            47.072581,
            46.791551,
            46.510520,
            46.229490,
            45.948460,
            45.667429,
            45.386399,
            45.105369,
            44.824339,
            44.543308,
            44.262278,
            43.981248,
            43.700218,
            43.419187,
            43.138157,
            42.857127,
            42.576096,
            42.295066,
            42.014036,
            41.733006,
            41.451975,
            41.170945,
            40.889915,
            40.608884,
            40.327854,
            40.046824,
            39.765793,
            39.484763,
            39.203733,
            38.922703,
            38.641672,
            38.360642,
            38.079612,
            37.798581,
            37.517551,
            37.236521,
            36.955490,
            36.674460,
            36.393430,
            36.112399,
            35.831369,
            35.550339,
            35.269308,
            34.988278,
            34.707248,
            34.426218,
            34.145187,
            33.864157,
            33.583127,
            33.302096,
            33.021066,
            32.740036,
            32.459005,
            32.177975,
            31.896945,
            31.615914,
            31.334884,
            31.053854,
            30.772823,
            30.491793,
            30.210763,
            29.929732,
            29.648702,
            29.367672,
            29.086641,
            28.805611,
            28.524581,
            28.243550,
            27.962520,
            27.681490,
            27.400459,
            27.119429,
            26.838399,
            26.557368,
            26.276338,
            25.995308,
            25.714277,
            25.433247,
            25.152217,
            24.871186,
            24.590156,
            24.309126,
            24.028095,
            23.747065,
            23.466035,
            23.185004,
            22.903974,
            22.622944,
            22.341913,
            22.060883,
            21.779853,
            21.498822,
            21.217792,
            20.936761,
            20.655731,
            20.374701,
            20.093670,
            19.812640,
            19.531610,
            19.250579,
            18.969549,
            18.688519,
            18.407488,
            18.126458,
            17.845428,
            17.564397,
            17.283367,
            17.002337,
            16.721306,
            16.440276,
            16.159246,
            15.878215,
            15.597185,
            15.316154,
            15.035124,
            14.754094,
            14.473063,
            14.192033,
            13.911003,
            13.629972,
            13.348942,
            13.067912,
            12.786881,
            12.505851,
            12.224821,
            11.943790,
            11.662760,
            11.381730,
            11.100699,
            10.819669,
            10.538638,
            10.257608,
            9.976578,
            9.695547,
            9.414517,
            9.133487,
            8.852456,
            8.571426,
            8.290396,
            8.009365,
            7.728335,
            7.447305,
            7.166274,
            6.885244,
            6.604213,
            6.323183,
            6.042153,
            5.761122,
            5.480092,
            5.199062,
            4.918031,
            4.637001,
            4.355971,
            4.074940,
            3.793910,
            3.512879,
            3.231849,
            2.950819,
            2.669788,
            2.388758,
            2.107728,
            1.826697,
            1.545667,
            1.264637,
            0.983606,
            0.702576,
            0.421546,
            0.140515,
            -0.140515,
            -0.421546,
            -0.702576,
            -0.983606,
            -1.264637,
            -1.545667,
            -1.826697,
            -2.107728,
            -2.388758,
            -2.669788,
            -2.950819,
            -3.231849,
            -3.512879,
            -3.793910,
            -4.074940,
            -4.355971,
            -4.637001,
            -4.918031,
            -5.199062,
            -5.480092,
            -5.761122,
            -6.042153,
            -6.323183,
            -6.604213,
            -6.885244,
            -7.166274,
            -7.447305,
            -7.728335,
            -8.009365,
            -8.290396,
            -8.571426,
            -8.852456,
            -9.133487,
            -9.414517,
            -9.695547,
            -9.976578,
            -10.257608,
            -10.538638,
            -10.819669,
            -11.100699,
            -11.381730,
            -11.662760,
            -11.943790,
            -12.224821,
            -12.505851,
            -12.786881,
            -13.067912,
            -13.348942,
            -13.629972,
            -13.911003,
            -14.192033,
            -14.473063,
            -14.754094,
            -15.035124,
            -15.316154,
            -15.597185,
            -15.878215,
            -16.159246,
            -16.440276,
            -16.721306,
            -17.002337,
            -17.283367,
            -17.564397,
            -17.845428,
            -18.126458,
            -18.407488,
            -18.688519,
            -18.969549,
            -19.250579,
            -19.531610,
            -19.812640,
            -20.093670,
            -20.374701,
            -20.655731,
            -20.936761,
            -21.217792,
            -21.498822,
            -21.779853,
            -22.060883,
            -22.341913,
            -22.622944,
            -22.903974,
            -23.185004,
            -23.466035,
            -23.747065,
            -24.028095,
            -24.309126,
            -24.590156,
            -24.871186,
            -25.152217,
            -25.433247,
            -25.714277,
            -25.995308,
            -26.276338,
            -26.557368,
            -26.838399,
            -27.119429,
            -27.400459,
            -27.681490,
            -27.962520,
            -28.243550,
            -28.524581,
            -28.805611,
            -29.086641,
            -29.367672,
            -29.648702,
            -29.929732,
            -30.210763,
            -30.491793,
            -30.772823,
            -31.053854,
            -31.334884,
            -31.615914,
            -31.896945,
            -32.177975,
            -32.459005,
            -32.740036,
            -33.021066,
            -33.302096,
            -33.583127,
            -33.864157,
            -34.145187,
            -34.426218,
            -34.707248,
            -34.988278,
            -35.269308,
            -35.550339,
            -35.831369,
            -36.112399,
            -36.393430,
            -36.674460,
            -36.955490,
            -37.236521,
            -37.517551,
            -37.798581,
            -38.079612,
            -38.360642,
            -38.641672,
            -38.922703,
            -39.203733,
            -39.484763,
            -39.765793,
            -40.046824,
            -40.327854,
            -40.608884,
            -40.889915,
            -41.170945,
            -41.451975,
            -41.733006,
            -42.014036,
            -42.295066,
            -42.576096,
            -42.857127,
            -43.138157,
            -43.419187,
            -43.700218,
            -43.981248,
            -44.262278,
            -44.543308,
            -44.824339,
            -45.105369,
            -45.386399,
            -45.667429,
            -45.948460,
            -46.229490,
            -46.510520,
            -46.791551,
            -47.072581,
            -47.353611,
            -47.634641,
            -47.915672,
            -48.196702,
            -48.477732,
            -48.758762,
            -49.039793,
            -49.320823,
            -49.601853,
            -49.882883,
            -50.163913,
            -50.444944,
            -50.725974,
            -51.007004,
            -51.288034,
            -51.569065,
            -51.850095,
            -52.131125,
            -52.412155,
            -52.693186,
            -52.974216,
            -53.255246,
            -53.536276,
            -53.817306,
            -54.098337,
            -54.379367,
            -54.660397,
            -54.941427,
            -55.222457,
            -55.503487,
            -55.784518,
            -56.065548,
            -56.346578,
            -56.627608,
            -56.908638,
            -57.189668,
            -57.470699,
            -57.751729,
            -58.032759,
            -58.313789,
            -58.594819,
            -58.875849,
            -59.156879,
            -59.437910,
            -59.718940,
            -59.999970,
            -60.281000,
            -60.562030,
            -60.843060,
            -61.124090,
            -61.405120,
            -61.686150,
            -61.967180,
            -62.248210,
            -62.529240,
            -62.810270,
            -63.091300,
            -63.372331,
            -63.653361,
            -63.934391,
            -64.215421,
            -64.496451,
            -64.777481,
            -65.058510,
            -65.339540,
            -65.620570,
            -65.901600,
            -66.182630,
            -66.463660,
            -66.744690,
            -67.025720,
            -67.306750,
            -67.587780,
            -67.868810,
            -68.149839,
            -68.430869,
            -68.711899,
            -68.992929,
            -69.273959,
            -69.554988,
            -69.836018,
            -70.117048,
            -70.398077,
            -70.679107,
            -70.960137,
            -71.241166,
            -71.522196,
            -71.803226,
            -72.084255,
            -72.365285,
            -72.646314,
            -72.927344,
            -73.208373,
            -73.489402,
            -73.770432,
            -74.051461,
            -74.332490,
            -74.613520,
            -74.894549,
            -75.175578,
            -75.456607,
            -75.737636,
            -76.018665,
            -76.299694,
            -76.580723,
            -76.861752,
            -77.142781,
            -77.423809,
            -77.704838,
            -77.985866,
            -78.266895,
            -78.547923,
            -78.828951,
            -79.109980,
            -79.391008,
            -79.672035,
            -79.953063,
            -80.234091,
            -80.515118,
            -80.796145,
            -81.077172,
            -81.358199,
            -81.639225,
            -81.920252,
            -82.201278,
            -82.482303,
            -82.763329,
            -83.044353,
            -83.325378,
            -83.606402,
            -83.887425,
            -84.168447,
            -84.449469,
            -84.730490,
            -85.011510,
            -85.292528,
            -85.573545,
            -85.854560,
            -86.135573,
            -86.416583,
            -86.697590,
            -86.978592,
            -87.259589,
            -87.540577,
            -87.821556,
            -88.102518,
            -88.383457,
            -88.664358,
            -88.945191,
            -89.225883,
            -89.506203,
            -89.784877,
        ]
        return lats

    def first_axis_vals(self):
        if self._resolution == 320:
            return self.get_precomputed_values_N320()
        else:
            logging.info("Calculating grid. Not using a pre-computed grid.")
            precision = 1.0e-14
            nval = self._resolution * 2
            rad2deg = 180 / math.pi
            convval = 1 - ((2 / math.pi) * (2 / math.pi)) * 0.25
            vals = self.gauss_first_guess()
            new_vals = [0] * nval
            denom = math.sqrt(((nval + 0.5) * (nval + 0.5)) + convval)
            for jval in range(self._resolution):
                root = math.cos(vals[jval] / denom)
                conv = 1
                while abs(conv) >= precision:
                    mem2 = 1
                    mem1 = root
                    for legi in range(nval):
                        legfonc = ((2.0 * (legi + 1) - 1.0) * root * mem1 - legi * mem2) / (legi + 1)
                        mem2 = mem1
                        mem1 = legfonc
                    conv = legfonc / ((nval * (mem2 - root * legfonc)) / (1.0 - (root * root)))
                    root = root - conv
                    # add maybe a max iter here to make sure we converge at some point
                new_vals[jval] = math.asin(root) * rad2deg
                new_vals[nval - 1 - jval] = -new_vals[jval]
            return new_vals

    def map_first_axis(self, lower, upper):
        axis_lines = self._first_axis_vals
        end_idx = bisect_left_cmp(axis_lines, lower, cmp=lambda x, y: x > y) + 1
        start_idx = bisect_right_cmp(axis_lines, upper, cmp=lambda x, y: x > y)
        return_vals = axis_lines[start_idx:end_idx]
        return return_vals

    def lon_spacing(self):
        if self._resolution == 320:
            return [
                18,
                25,
                36,
                40,
                45,
                50,
                60,
                64,
                72,
                72,
                75,
                81,
                90,
                96,
                100,
                108,
                120,
                120,
                125,
                135,
                144,
                144,
                150,
                160,
                180,
                180,
                180,
                192,
                192,
                200,
                216,
                216,
                216,
                225,
                240,
                240,
                240,
                250,
                256,
                270,
                270,
                288,
                288,
                288,
                300,
                300,
                320,
                320,
                320,
                324,
                360,
                360,
                360,
                360,
                360,
                360,
                375,
                375,
                384,
                384,
                400,
                400,
                405,
                432,
                432,
                432,
                432,
                450,
                450,
                450,
                480,
                480,
                480,
                480,
                480,
                486,
                500,
                500,
                500,
                512,
                512,
                540,
                540,
                540,
                540,
                540,
                576,
                576,
                576,
                576,
                576,
                576,
                600,
                600,
                600,
                600,
                640,
                640,
                640,
                640,
                640,
                640,
                640,
                648,
                648,
                675,
                675,
                675,
                675,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                729,
                750,
                750,
                750,
                750,
                768,
                768,
                768,
                768,
                800,
                800,
                800,
                800,
                800,
                800,
                810,
                810,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                900,
                900,
                900,
                900,
                900,
                900,
                900,
                900,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                972,
                972,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                1024,
                1024,
                1024,
                1024,
                1024,
                1024,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1215,
                1215,
                1215,
                1215,
                1215,
                1215,
                1215,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1280,
                1215,
                1215,
                1215,
                1215,
                1215,
                1215,
                1215,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1200,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1152,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1125,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1080,
                1024,
                1024,
                1024,
                1024,
                1024,
                1024,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                1000,
                972,
                972,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                960,
                900,
                900,
                900,
                900,
                900,
                900,
                900,
                900,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                864,
                810,
                810,
                800,
                800,
                800,
                800,
                800,
                800,
                768,
                768,
                768,
                768,
                750,
                750,
                750,
                750,
                729,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                720,
                675,
                675,
                675,
                675,
                648,
                648,
                640,
                640,
                640,
                640,
                640,
                640,
                640,
                600,
                600,
                600,
                600,
                576,
                576,
                576,
                576,
                576,
                576,
                540,
                540,
                540,
                540,
                540,
                512,
                512,
                500,
                500,
                500,
                486,
                480,
                480,
                480,
                480,
                480,
                450,
                450,
                450,
                432,
                432,
                432,
                432,
                405,
                400,
                400,
                384,
                384,
                375,
                375,
                360,
                360,
                360,
                360,
                360,
                360,
                324,
                320,
                320,
                320,
                300,
                300,
                288,
                288,
                288,
                270,
                270,
                256,
                250,
                240,
                240,
                240,
                225,
                216,
                216,
                216,
                200,
                192,
                192,
                180,
                180,
                180,
                160,
                150,
                144,
                144,
                135,
                125,
                120,
                120,
                108,
                100,
                96,
                90,
                81,
                75,
                72,
                72,
                64,
                60,
                50,
                45,
                40,
                36,
                25,
                18,
            ]

    def second_axis_vals(self, first_val):
        first_idx = self._first_axis_vals.index(first_val[0])
        Ny = self.lon_spacing()[first_idx]
        second_spacing = 360 / Ny
        return [i * second_spacing for i in range(Ny)]

    def axes_idx_to_reduced_gaussian_idx(self, first_idx, second_idx):
        Ny_array = self.lon_spacing()
        idx = 0
        for i in range(self._resolution):
            if i != first_idx:
                idx += Ny_array[i]
            else:
                idx += second_idx
                return idx

    # def find_second_idx(self, first_val, second_val):
    #     tol = 1e-10
    #     second_axis_vals = self.second_axis_vals(first_val)
    #     second_idx = bisect.bisect_left(second_axis_vals, second_val[0] - tol)
    #     return second_idx

    # def unmap(self, first_val, second_val):
    #     (first_idx, second_idx) = self.find_second_idx(first_val, second_val)
    #     octahedral_index = self.axes_idx_to_reduced_gaussian_idx(first_idx, second_idx)
    #     return octahedral_index

    def unmap(self, first_val, second_val):
        tol = 1e-8
        first_value = [i for i in self._first_axis_vals if first_val[0] - tol <= i <= first_val[0] + tol][0]
        first_idx = self._first_axis_vals.index(first_value)
        second_val = [i for i in self.second_axis_vals(first_val) if second_val[0] - tol <= i <= second_val[0] + tol][0]
        second_idx = self.second_axis_vals(first_val).index(second_val)
        reduced_gaussian_index = self.axes_idx_to_reduced_gaussian_idx(first_idx, second_idx)
        return reduced_gaussian_index


# md5 grid hash in form {resolution : hash}
_md5_hash = {
    320: "158db321ae8e773681eeb40e0a3d350f",
}
